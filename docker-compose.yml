name: table_editor

services:
  reverse_proxy:
    # Maps urls to ports to various services.
    # Main entry point for external clients.
    container_name: reverse_proxy
    build: ReverseProxy
    ports:
      - ${TABLE_EDITOR_HTTP_PORT-8080}:8080
      - ${TABLE_EDITOR_HTTPS_PORT-4430}:4430
    environment:
      TABLE_EDITOR_FRONTEND_PORT: ${TABLE_EDITOR_FRONTEND_PORT-3000}
      TABLE_EDITOR_WS_PORT: ${TABLE_EDITOR_WS_PORT-4000}
    depends_on:
      - frontend
      - rest_api
      - web_socket_server

  rest_api:
    # Provides a RESTful API for interfacing with the database.
    container_name: rest_api
    build: RestAPI
    depends_on:
      - database
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  web_socket_server:
    # Handles web sockets for providing real-time interaction with clients.
    # Built in Rust.
    container_name: web_socket_server
    build: WebSocketServer
    ports:
      - ${TABLE_EDITOR_WS_PORT-4000}:4000
    environment:
      TABLE_EDITOR_FRONTEND_PORT: ${TABLE_EDITOR_FRONTEND_PORT-3000}
      TABLE_EDITOR_WS_PORT: ${TABLE_EDITOR_WS_PORT-4000}
    depends_on:
      - database
  
  frontend:
    # Frontend code to serve to client.
    # Built using Vite, served with nginx
    container_name: frontend
    build: Frontend
    depends_on:
      - web_socket_server
    environment:
      TABLE_EDITOR_FRONTEND_PORT: ${TABLE_EDITOR_FRONTEND_PORT-3000}
      TABLE_EDITOR_WS_PORT: ${TABLE_EDITOR_WS_PORT-4000}

  database:
    # PostgreSQL database
    container_name: database
    build: Database
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

volumes:
  db-data:
