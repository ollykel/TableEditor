name: EC2 Test Deployment

on:
  push:
    branches:
      - feat/container-registry-ci-cd

  workflow_call:
    secrets:
      DOCKER_USERNAME:
        description: "Docker hub username"
        required: true
      DOCKER_PASSWORD:
        description: "Docker hub password"
        required: true
      DOCKER_REPOSITORY:
        description: "Root name of docker registry repositories"
        required: true
      AWS_ACCESS_KEY_ID:
        description: "AWS access key ID"
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: "AWS secret access key"
        required: true
      EC2_SSH_KEY:
        description: "SSH key for accessing EC2"
        required: true
      EC2_KEY_PAIR_NAME:
        description: "Name of key pair for accessing EC2"
        required: true
      ENV_FILE:
        description: "Contents of the repository .env file"
        required: true
      EC2_SUBNET_ID:
        description: "ID of subnet to use on EC2"
        required: true
      SSL_KEY_FILE:
        description: "Contents of SSL key file to place in ReverseProxy/"
        required: true
      SSL_CERT_FILE:
        description: "Contents of SSL certificate file to place in ReverseProxy/"
        required: true

jobs:
  build_and_push:
    # Build docker services locally and publish to Docker registry
    runs-on: ubuntu-24.04

    steps:
      # Check out the repo
      - uses: actions/checkout@v5

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        run: docker buildx create --use

      # Cache Docker layers locally
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.docker-cache
          key: docker-cache-${{ runner.os }}-${{ github.sha }}
          restore-keys: docker-cache-${{ runner.os }}-

      # Build Docker images from docker-compose.yml
      - name: Build Docker images
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1
        run: |
          # Ensure cache directory exists
          mkdir -p /tmp/.docker-cache

          # Build all services with cache
          docker compose build --progress=plain --build-arg BUILDKIT_INLINE_CACHE=1

      # Log in to Docker registry
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push images to registry
      - name: Push Docker images
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}
        run: docker compose push

  deploy:
    # Deploy to EC2 instance using Terraform
    runs-on: ubuntu-24.04
    needs: build_and_push

    steps:
      # Check out the repo
      - uses: actions/checkout@v5

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      # Configure AWS credentials
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      # Terraform Init
      - name: Terraform Init
        run: terraform init

      # Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          TF_VAR_ec2_ssh_key: ${{ secrets.EC2_SSH_KEY }}
          TF_VAR_docker_username: ${{ secrets.DOCKER_USERNAME }}
          TF_VAR_docker_password: ${{ secrets.DOCKER_PASSWORD }}
          TF_VAR_env_file: ${{ secrets.ENV_FILE }}
          TF_VAR_subnet_id: ${{ secrets.SUBNET_ID }}
          TF_VAR_ssl_key_file: ${{ secrets.SSL_KEY_FILE }}
          TF_VAR_ssl_cert_file: ${{ secrets.SSL_CERT_FILE }}
          TF_VAR_ec2_key_pair_name: ${{ secrets.EC2_KEY_PAIR_NAME }}
